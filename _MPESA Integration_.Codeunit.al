codeunit 50102 "MPESA Integration"
{
    trigger OnRun()
    begin
        PostMpesaPayments();
    end;
    var Text000: Label 'MPESA Integration Setup doesn''t exist';
    SuccessCode: Label '100';
    NoData: Label '102';
    Exception: Label '103';
    Text001: Label 'No data to be fetched';
    Text002: Label 'Exception Error';
    RC: Code[20];
    SmsTxt: Label 'Dear %1 your payment to BPIT of KES. %2 has been received. Thank you for your continued service.';
    procedure PostPayments(RefNo: Code[20])
    var
        PaymentsArray: array[1000]of Text;
        i: Integer;
        Clients: Text;
        Position: Integer;
        ClientsArray: array[1000]of Text[250];
        z: Integer;
        LineNo: Integer;
        GenJnlLine: Record "Gen. Journal Line";
        MPESASetup: Record "MPESA Integration Setup";
        GenBatch: Record "Gen. Journal Batch";
        CurrPostingDate: DateTime;
        Contr: Decimal;
        Payments: Text;
        PaymentID: Integer;
        MemberRec: Record customer;
        ClientPosition: Integer;
        CustRec: Record Customer;
        RcptHeader: Record Payments;
        RcptHeader2: Record Payments;
        RcptLine: Record "Payment Lines";
        RcptLine2: Record "Payment Lines";
        GLAccount: Record "G/L Account";
        Narration: Text;
        LicenseApp: Record "License Applications";
        LicenseRen: Record "License Applications";
        Licenses: Record "Licensing dairy Enterprise";
        MonthlyReturn: Record "Monthly Form of Return";
        CustLedgerEntry: Record "Cust. Ledger Entry";
    begin
        MPESASetup.Get();
        LicenseApp.SetRange("No.", RefNo);
        if LicenseApp.FindFirst()then begin
            Licenses.SetRange("Application no", LicenseApp."Applicant No.");
            if Licenses.FindFirst()then begin
                CustLedgerEntry.Reset();
                CustLedgerEntry.SetRange("Document No.", LicenseApp."Invoice No.");
                if CustLedgerEntry.FindFirst()then begin
                    CustLedgerEntry.CalcFields("Remaining Amount");
                    //insert header
                    RcptHeader.INIT;
                    RcptHeader."No.":='';
                    RcptHeader.Date:=TODAY;
                    RcptHeader.Cashier:=USERID;
                    RcptHeader."Created By":=USERID;
                    RcptHeader."Date Created":=Today;
                    RcptHeader."Payment Release Date":=Today;
                    RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                    RcptHeader."Receipt Amount":=CustLedgerEntry.Amount;
                    RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                    RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                    RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                    RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                    RcptHeader.VALIDATE("Paying Bank Account");
                    RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Licensing';
                    RcptHeader."Payment Narration":='MPESASetup."Default Description';
                    RcptHeader.INSERT(true);
                    Message(RcptHeader."No.");
                    RcptLine2.reset;
                    RcptLine2.SetRange(No, RcptHeader."No.");
                    if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                    //insert lines
                    RcptLine.INIT;
                    RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                    RcptLine."Line No":=1000;
                    RcptLine.No:=RcptHeader."No.";
                    RcptLine."Expenditure Type":=MPESASetup."Default Type";
                    RcptLine.validate("Expenditure Type");
                    RcptLine."Account No":=Licenses."Customer No.";
                    RcptLine.VALIDATE("Account No");
                    RcptLine.Amount:=CustLedgerEntry."Remaining Amount";
                    RcptLine.validate(Amount);
                    RcptLine."Applies-to ID":=RcptHeader."No.";
                    RcptLine.INSERT;
                    CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                    CustLedgerEntry.Modify();
                end;
                //Post Receipts
                GenJnlLine.RESET;
                GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                GenJnlLine.DELETEALL;
                GenBatch.INIT;
                GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                GenBatch.Name:=RcptHeader."No.";
                IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                LineNo:=LineNo + 10000;
                //insert Entries to GL
                GenJnlLine.INIT;
                GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                GenJnlLine."Line No.":=LineNo;
                GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                GenJnlLine."Posting Date":=TODAY;
                GenJnlLine."Document No.":=RcptHeader."No.";
                GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                // EVALUATE(Contr, ClientsArray[4]);
                RcptHeader.CalcFields("Receipt Amount");
                GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                RcptLine2.SetRange(No, RcptHeader."No.");
                if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=RcptLine2."Account Type";
                        GenJnlLine."Account No.":=RcptLine2."Account No";
                        GenJnlLine.Validate(GenJnlLine."Account No.");
                        GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                        GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                        GenJnlLine.Description:=RcptLine2.Description;
                        GenJnlLine.Amount:=-RcptLine2.Amount;
                        GenJnlLine."Currency Code":=RcptHeader.Currency;
                        GenJnlLine.Validate("Currency Code");
                        GenJnlLine.Validate(GenJnlLine.Amount);
                        GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                        GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                        GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                        GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                        GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                        GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                        //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                        GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                        GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                        GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                        if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                        if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                        if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                        //Lydia
                        //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                        if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                    until RcptLine2.Next() = 0;
                CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                LicenseApp.Paid:=true;
                LicenseApp."Receipt No.":=RcptHeader."No.";
                LicenseApp.Status:=LicenseApp.Status::"Pending inspection";
                LicenseApp.Modify();
                //Update Receipt
                RcptHeader2.RESET;
                RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                IF RcptHeader2.FIND('-')THEN BEGIN
                    RcptHeader2.Cashier:=USERID;
                    RcptHeader2.Posted:=TRUE;
                    RcptHeader2."Posting Date":=TODAY;
                    RcptHeader2."Time Posted":=TIME;
                    RcptHeader2."Posted By":=USERID;
                    //Update Lines
                    RcptLine2.RESET;
                    RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                    RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                    IF RcptLine2.FIND('-')THEN BEGIN
                        REPEAT RcptLine2.Posted:=TRUE;
                            RcptLine2.MODIFY;
                        UNTIL RcptLine2.NEXT = 0;
                    END;
                    RcptHeader2.MODIFY;
                END;
            END;
        end;
        MonthlyReturn.SetRange("No.", RefNo);
        if MonthlyReturn.FindFirst()then begin
            Licenses.SetRange("Application no", MonthlyReturn."Applicant No.");
            if Licenses.FindFirst()then begin
                CustLedgerEntry.Reset();
                CustLedgerEntry.SetRange("Document No.", MonthlyReturn."Invoice No.");
                if CustLedgerEntry.FindFirst()then begin
                    CustLedgerEntry.CalcFields("Remaining Amount");
                    //insert header
                    RcptHeader.INIT;
                    RcptHeader."No.":='';
                    RcptHeader.Date:=TODAY;
                    RcptHeader.Cashier:=USERID;
                    RcptHeader."Created By":=USERID;
                    RcptHeader."Date Created":=Today;
                    RcptHeader."Payment Release Date":=Today;
                    RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                    RcptHeader."Receipt Amount":=CustLedgerEntry.Amount;
                    RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                    RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                    RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                    RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                    RcptHeader.VALIDATE("Paying Bank Account");
                    RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Monthly return';
                    RcptHeader."Payment Narration":='MPESASetup."Default Description';
                    RcptHeader.INSERT(true);
                    Message(RcptHeader."No.");
                    RcptLine2.reset;
                    RcptLine2.SetRange(No, RcptHeader."No.");
                    if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                    //insert lines
                    RcptLine.INIT;
                    RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                    RcptLine."Line No":=1000;
                    RcptLine.No:=RcptHeader."No.";
                    RcptLine."Expenditure Type":=MPESASetup."Default Type";
                    RcptLine.validate("Expenditure Type");
                    RcptLine."Account No":=Licenses."Customer No.";
                    RcptLine.VALIDATE("Account No");
                    RcptLine.Amount:=CustLedgerEntry."Remaining Amount";
                    RcptLine.validate(Amount);
                    RcptLine."Applies-to ID":=RcptHeader."No.";
                    RcptLine.INSERT;
                    CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                    CustLedgerEntry.Modify();
                end;
                //Post Receipts
                GenJnlLine.RESET;
                GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                GenJnlLine.DELETEALL;
                GenBatch.INIT;
                GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                GenBatch.Name:=RcptHeader."No.";
                IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                LineNo:=LineNo + 10000;
                //insert Entries to GL
                GenJnlLine.INIT;
                GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                GenJnlLine."Line No.":=LineNo;
                GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                GenJnlLine."Posting Date":=TODAY;
                GenJnlLine."Document No.":=RcptHeader."No.";
                GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                // EVALUATE(Contr, ClientsArray[4]);
                RcptHeader.CalcFields("Receipt Amount");
                GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                RcptLine2.SetRange(No, RcptHeader."No.");
                if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=RcptLine2."Account Type";
                        GenJnlLine."Account No.":=RcptLine2."Account No";
                        GenJnlLine.Validate(GenJnlLine."Account No.");
                        GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                        GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                        GenJnlLine.Description:=RcptLine2.Description;
                        GenJnlLine.Amount:=-RcptLine2.Amount;
                        GenJnlLine."Currency Code":=RcptHeader.Currency;
                        GenJnlLine.Validate("Currency Code");
                        GenJnlLine.Validate(GenJnlLine.Amount);
                        GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                        GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                        GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                        GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                        GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                        GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                        //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                        GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                        GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                        GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                        if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                        if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                        if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                        //Lydia
                        //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                        if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                    until RcptLine2.Next() = 0;
                CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                MonthlyReturn.Paid:=true;
                MonthlyReturn."Receipt No.":=RcptHeader."No.";
                MonthlyReturn.Modify();
                //Update Receipt
                RcptHeader2.RESET;
                RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                IF RcptHeader2.FIND('-')THEN BEGIN
                    RcptHeader2.Cashier:=USERID;
                    RcptHeader2.Posted:=TRUE;
                    RcptHeader2."Posting Date":=TODAY;
                    RcptHeader2."Time Posted":=TIME;
                    RcptHeader2."Posted By":=USERID;
                    //Update Lines
                    RcptLine2.RESET;
                    RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                    RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                    IF RcptLine2.FIND('-')THEN BEGIN
                        REPEAT RcptLine2.Posted:=TRUE;
                            RcptLine2.MODIFY;
                        UNTIL RcptLine2.NEXT = 0;
                    END;
                    RcptHeader2.MODIFY;
                END;
            END;
        end;
    end;
    procedure PostMpesaPayments()
    var
        PaymentsArray: array[1000]of Text;
        i: Integer;
        Clients: Text;
        Position: Integer;
        ClientsArray: array[1000]of Text[250];
        z: Integer;
        LineNo: Integer;
        GenJnlLine: Record "Gen. Journal Line";
        MPESASetup: Record "MPESA Integration Setup";
        GenBatch: Record "Gen. Journal Batch";
        CurrPostingDate: DateTime;
        Contr: Decimal;
        Payments: Text;
        PaymentID: Integer;
        MemberRec: Record customer;
        ClientPosition: Integer;
        CustRec: Record Customer;
        RcptHeader: Record Payments;
        RcptHeader2: Record Payments;
        RcptLine: Record "Payment Lines";
        RcptLine2: Record "Payment Lines";
        GLAccount: Record "G/L Account";
        MonthlyReturn: Record "Monthly Form of Return";
        Narration: Text;
        LicenseApp: Record "License Applications";
        LicenseRen: Record "License Renewals";
        Licenses: Record "Licensing dairy Enterprise";
        CustLedgerEntry: Record "Cust. Ledger Entry";
        CompMgmt: codeunit "Compliance Management";
        MpesaEntries: Record "Mpesa entries";
    begin
        MPESASetup.Get();
        MpesaEntries.SetRange(Posted, false);
        if MpesaEntries.Find('-')then repeat LicenseApp.Reset();
                LicenseApp.SetRange("Invoice No.", MpesaEntries.BillRefNumber);
                if LicenseApp.FindFirst()then begin
                    Licenses.SetRange("Application no", LicenseApp."Applicant No.");
                    if Licenses.FindFirst()then begin
                        CustLedgerEntry.Reset();
                        CustLedgerEntry.SetRange("Document No.", LicenseApp."Invoice No.");
                        if CustLedgerEntry.FindFirst()then begin
                            CustLedgerEntry.CalcFields("Remaining Amount");
                            //insert header
                            RcptHeader.INIT;
                            RcptHeader."No.":='';
                            RcptHeader.Date:=TODAY;
                            RcptHeader.Cashier:=USERID;
                            RcptHeader."Created By":=USERID;
                            RcptHeader."Date Created":=Today;
                            RcptHeader."Payment Release Date":=Today;
                            RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                            RcptHeader."Receipt Amount":=MpesaEntries.TransAmount;
                            RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                            RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                            RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                            RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                            RcptHeader.VALIDATE("Paying Bank Account");
                            RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Licensing';
                            RcptHeader."Payment Narration":='MPESASetup."Default Description';
                            RcptHeader.INSERT(true);
                            Message(RcptHeader."No.");
                            RcptLine2.reset;
                            RcptLine2.SetRange(No, RcptHeader."No.");
                            if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                            //insert lines
                            RcptLine.INIT;
                            RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                            RcptLine."Line No":=1000;
                            RcptLine.No:=RcptHeader."No.";
                            RcptLine."Expenditure Type":=MPESASetup."Default Type";
                            RcptLine.validate("Expenditure Type");
                            RcptLine."Account No":=Licenses."Customer No.";
                            RcptLine.VALIDATE("Account No");
                            RcptLine.Amount:=MpesaEntries.TransAmount;
                            RcptLine.validate(Amount);
                            RcptLine."Applies-to ID":=RcptHeader."No.";
                            RcptLine.INSERT;
                            CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                            CustLedgerEntry.Modify();
                        end;
                        //Post Receipts
                        GenJnlLine.RESET;
                        GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                        GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                        GenJnlLine.DELETEALL;
                        GenBatch.INIT;
                        GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenBatch.Name:=RcptHeader."No.";
                        IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                        LineNo:=LineNo + 10000;
                        //insert Entries to GL
                        GenJnlLine.INIT;
                        GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                        GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                        GenJnlLine."Posting Date":=TODAY;
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                        // EVALUATE(Contr, ClientsArray[4]);
                        RcptHeader.CalcFields("Receipt Amount");
                        GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                        IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                        RcptLine2.SetRange(No, RcptHeader."No.");
                        if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                                GenJnlLine."Line No.":=LineNo;
                                GenJnlLine."Account Type":=RcptLine2."Account Type";
                                GenJnlLine."Account No.":=RcptLine2."Account No";
                                GenJnlLine.Validate(GenJnlLine."Account No.");
                                GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                                GenJnlLine."Document No.":=RcptHeader."No.";
                                GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                                GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                                GenJnlLine.Description:=RcptLine2.Description;
                                GenJnlLine.Amount:=-RcptLine2.Amount;
                                GenJnlLine."Currency Code":=RcptHeader.Currency;
                                GenJnlLine.Validate("Currency Code");
                                GenJnlLine.Validate(GenJnlLine.Amount);
                                GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                                GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                                GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                                GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                                //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                                GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                                GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                                GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                                if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                                if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                                if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                                //Lydia
                                //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                                if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                            until RcptLine2.Next() = 0;
                        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                        LicenseApp.Paid:=true;
                        LicenseApp.Status:=LicenseApp.Status::"Pending inspection";
                        LicenseApp."Receipt No.":=RcptHeader."No.";
                        LicenseApp.Modify();
                        //Update Receipt
                        RcptHeader2.RESET;
                        RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                        IF RcptHeader2.FIND('-')THEN BEGIN
                            RcptHeader2.Cashier:=USERID;
                            RcptHeader2.Posted:=TRUE;
                            RcptHeader2."Posting Date":=TODAY;
                            RcptHeader2."Time Posted":=TIME;
                            RcptHeader2."Posted By":=USERID;
                            //Update Lines
                            RcptLine2.RESET;
                            RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                            RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                            IF RcptLine2.FIND('-')THEN BEGIN
                                REPEAT RcptLine2.Posted:=TRUE;
                                    RcptLine2.MODIFY;
                                UNTIL RcptLine2.NEXT = 0;
                            END;
                            RcptHeader2.MODIFY;
                        END;
                        MpesaEntries.Posted:=true;
                        MpesaEntries.Modify();
                    end;
                end;
                LicenseApp.Reset();
                LicenseApp.SetRange("License fee Invoice No.", MpesaEntries.BillRefNumber);
                if LicenseApp.FindFirst()then begin
                    Licenses.SetRange("Application no", LicenseApp."Applicant No.");
                    if Licenses.FindFirst()then begin
                        CustLedgerEntry.Reset();
                        CustLedgerEntry.SetRange("Document No.", LicenseApp."License fee Invoice No.");
                        if CustLedgerEntry.FindFirst()then begin
                            CustLedgerEntry.CalcFields("Remaining Amount");
                            //insert header
                            RcptHeader.INIT;
                            RcptHeader."No.":='';
                            RcptHeader.Date:=TODAY;
                            RcptHeader.Cashier:=USERID;
                            RcptHeader."Created By":=USERID;
                            RcptHeader."Date Created":=Today;
                            RcptHeader."Payment Release Date":=Today;
                            RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                            RcptHeader."Receipt Amount":=MpesaEntries.TransAmount;
                            RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                            RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                            RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                            RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                            RcptHeader.VALIDATE("Paying Bank Account");
                            RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Licensing';
                            RcptHeader."Payment Narration":='MPESASetup."Default Description';
                            RcptHeader.INSERT(true);
                            Message(RcptHeader."No.");
                            RcptLine2.reset;
                            RcptLine2.SetRange(No, RcptHeader."No.");
                            if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                            //insert lines
                            RcptLine.INIT;
                            RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                            RcptLine."Line No":=1000;
                            RcptLine.No:=RcptHeader."No.";
                            RcptLine."Expenditure Type":=MPESASetup."Default Type";
                            RcptLine.validate("Expenditure Type");
                            RcptLine."Account No":=Licenses."Customer No.";
                            RcptLine.VALIDATE("Account No");
                            RcptLine.Amount:=MpesaEntries.TransAmount;
                            RcptLine.validate(Amount);
                            RcptLine."Applies-to ID":=RcptHeader."No.";
                            RcptLine.INSERT;
                            CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                            CustLedgerEntry.Modify();
                        end;
                        //Post Receipts
                        GenJnlLine.RESET;
                        GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                        GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                        GenJnlLine.DELETEALL;
                        GenBatch.INIT;
                        GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenBatch.Name:=RcptHeader."No.";
                        IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                        LineNo:=LineNo + 10000;
                        //insert Entries to GL
                        GenJnlLine.INIT;
                        GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                        GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                        GenJnlLine."Posting Date":=TODAY;
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                        // EVALUATE(Contr, ClientsArray[4]);
                        RcptHeader.CalcFields("Receipt Amount");
                        GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                        IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                        RcptLine2.SetRange(No, RcptHeader."No.");
                        if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                                GenJnlLine."Line No.":=LineNo;
                                GenJnlLine."Account Type":=RcptLine2."Account Type";
                                GenJnlLine."Account No.":=RcptLine2."Account No";
                                GenJnlLine.Validate(GenJnlLine."Account No.");
                                GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                                GenJnlLine."Document No.":=RcptHeader."No.";
                                GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                                GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                                GenJnlLine.Description:=RcptLine2.Description;
                                GenJnlLine.Amount:=-RcptLine2.Amount;
                                GenJnlLine."Currency Code":=RcptHeader.Currency;
                                GenJnlLine.Validate("Currency Code");
                                GenJnlLine.Validate(GenJnlLine.Amount);
                                GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                                GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                                GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                                GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                                //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                                GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                                GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                                GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                                if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                                if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                                if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                                //Lydia
                                //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                                if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                            until RcptLine2.Next() = 0;
                        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                        LicenseApp."Paid license fee":=true;
                        LicenseApp.Status:=LicenseApp.Status::Approved;
                        LicenseApp."License fee Receipt No.":=RcptHeader."No.";
                        LicenseApp.Modify();
                        //CompMgmt.IssueLicense(LicenseApp."No.");
                        //Update Receipt
                        RcptHeader2.RESET;
                        RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                        IF RcptHeader2.FIND('-')THEN BEGIN
                            RcptHeader2.Cashier:=USERID;
                            RcptHeader2.Posted:=TRUE;
                            RcptHeader2."Posting Date":=TODAY;
                            RcptHeader2."Time Posted":=TIME;
                            RcptHeader2."Posted By":=USERID;
                            //Update Lines
                            RcptLine2.RESET;
                            RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                            RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                            IF RcptLine2.FIND('-')THEN BEGIN
                                REPEAT RcptLine2.Posted:=TRUE;
                                    RcptLine2.MODIFY;
                                UNTIL RcptLine2.NEXT = 0;
                            END;
                            RcptHeader2.MODIFY;
                        END;
                        MpesaEntries.Posted:=true;
                        MpesaEntries.Modify();
                    end;
                end;
                //Invoice Renewal
                LicenseRen.Reset();
                LicenseRen.SetRange("Invoice No.", MpesaEntries.BillRefNumber);
                if LicenseRen.FindFirst()then begin
                    Licenses.SetRange("Application no", LicenseRen."Applicant No.");
                    if Licenses.FindFirst()then begin
                        CustLedgerEntry.Reset();
                        CustLedgerEntry.SetRange("Document No.", LicenseRen."Invoice No.");
                        if CustLedgerEntry.FindFirst()then begin
                            CustLedgerEntry.CalcFields("Remaining Amount");
                            //insert header
                            RcptHeader.INIT;
                            RcptHeader."No.":='';
                            RcptHeader.Date:=TODAY;
                            RcptHeader.Cashier:=USERID;
                            RcptHeader."Created By":=USERID;
                            RcptHeader."Date Created":=Today;
                            RcptHeader."Payment Release Date":=Today;
                            RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                            RcptHeader."Receipt Amount":=MpesaEntries.TransAmount;
                            RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                            RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                            RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                            RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                            RcptHeader.VALIDATE("Paying Bank Account");
                            RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Licensing';
                            RcptHeader."Payment Narration":='MPESASetup."Default Description';
                            RcptHeader.INSERT(true);
                            Message(RcptHeader."No.");
                            RcptLine2.reset;
                            RcptLine2.SetRange(No, RcptHeader."No.");
                            if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                            //insert lines
                            RcptLine.INIT;
                            RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                            RcptLine."Line No":=1000;
                            RcptLine.No:=RcptHeader."No.";
                            RcptLine."Expenditure Type":=MPESASetup."Default Type";
                            RcptLine.validate("Expenditure Type");
                            RcptLine."Account No":=Licenses."Customer No.";
                            RcptLine.VALIDATE("Account No");
                            RcptLine.Amount:=MpesaEntries.TransAmount;
                            RcptLine.validate(Amount);
                            RcptLine."Applies-to ID":=RcptHeader."No.";
                            RcptLine.INSERT;
                            CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                            CustLedgerEntry.Modify();
                        end;
                        //Post Receipts
                        GenJnlLine.RESET;
                        GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                        GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                        GenJnlLine.DELETEALL;
                        GenBatch.INIT;
                        GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenBatch.Name:=RcptHeader."No.";
                        IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                        LineNo:=LineNo + 10000;
                        //insert Entries to GL
                        GenJnlLine.INIT;
                        GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                        GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                        GenJnlLine."Posting Date":=TODAY;
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                        // EVALUATE(Contr, ClientsArray[4]);
                        RcptHeader.CalcFields("Receipt Amount");
                        GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                        IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                        RcptLine2.SetRange(No, RcptHeader."No.");
                        if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                                GenJnlLine."Line No.":=LineNo;
                                GenJnlLine."Account Type":=RcptLine2."Account Type";
                                GenJnlLine."Account No.":=RcptLine2."Account No";
                                GenJnlLine.Validate(GenJnlLine."Account No.");
                                GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                                GenJnlLine."Document No.":=RcptHeader."No.";
                                GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                                GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                                GenJnlLine.Description:=RcptLine2.Description;
                                GenJnlLine.Amount:=-RcptLine2.Amount;
                                GenJnlLine."Currency Code":=RcptHeader.Currency;
                                GenJnlLine.Validate("Currency Code");
                                GenJnlLine.Validate(GenJnlLine.Amount);
                                GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                                GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                                GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                                GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                                //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                                GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                                GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                                GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                                if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                                if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                                if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                                //Lydia
                                //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                                if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                            until RcptLine2.Next() = 0;
                        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                        LicenseRen.Paid:=true;
                        LicenseRen."Receipt No.":=RcptHeader."No.";
                        LicenseRen.Status:=LicenseRen.Status::"Pending inspection";
                        LicenseRen.Modify();
                        //Update Receipt
                        RcptHeader2.RESET;
                        RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                        IF RcptHeader2.FIND('-')THEN BEGIN
                            RcptHeader2.Cashier:=USERID;
                            RcptHeader2.Posted:=TRUE;
                            RcptHeader2."Posting Date":=TODAY;
                            RcptHeader2."Time Posted":=TIME;
                            RcptHeader2."Posted By":=USERID;
                            //Update Lines
                            RcptLine2.RESET;
                            RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                            RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                            IF RcptLine2.FIND('-')THEN BEGIN
                                REPEAT RcptLine2.Posted:=TRUE;
                                    RcptLine2.MODIFY;
                                UNTIL RcptLine2.NEXT = 0;
                            END;
                            RcptHeader2.MODIFY;
                        END;
                        MpesaEntries.Posted:=true;
                        MpesaEntries.Modify();
                    end;
                end;
                //Invoice annual fee renewal
                LicenseRen.Reset();
                LicenseRen.SetRange("License fee Invoice No.", MpesaEntries.BillRefNumber);
                if LicenseRen.FindFirst()then begin
                    Licenses.SetRange("Application no", LicenseRen."Applicant No.");
                    if Licenses.FindFirst()then begin
                        CustLedgerEntry.Reset();
                        CustLedgerEntry.SetRange("Document No.", LicenseRen."License fee Invoice No.");
                        if CustLedgerEntry.FindFirst()then begin
                            CustLedgerEntry.CalcFields("Remaining Amount");
                            //insert header
                            RcptHeader.INIT;
                            RcptHeader."No.":='';
                            RcptHeader.Date:=TODAY;
                            RcptHeader.Cashier:=USERID;
                            RcptHeader."Created By":=USERID;
                            RcptHeader."Date Created":=Today;
                            RcptHeader."Payment Release Date":=Today;
                            RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                            RcptHeader."Receipt Amount":=MpesaEntries.TransAmount;
                            RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                            RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                            RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                            RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                            RcptHeader.VALIDATE("Paying Bank Account");
                            RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Licensing';
                            RcptHeader."Payment Narration":='MPESASetup."Default Description';
                            RcptHeader.INSERT(true);
                            Message(RcptHeader."No.");
                            RcptLine2.reset;
                            RcptLine2.SetRange(No, RcptHeader."No.");
                            if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                            //insert lines
                            RcptLine.INIT;
                            RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                            RcptLine."Line No":=1000;
                            RcptLine.No:=RcptHeader."No.";
                            RcptLine."Expenditure Type":=MPESASetup."Default Type";
                            RcptLine.validate("Expenditure Type");
                            RcptLine."Account No":=Licenses."Customer No.";
                            RcptLine.VALIDATE("Account No");
                            RcptLine.Amount:=MpesaEntries.TransAmount;
                            RcptLine.validate(Amount);
                            RcptLine."Applies-to ID":=RcptHeader."No.";
                            RcptLine.INSERT;
                            CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                            CustLedgerEntry.Modify();
                        end;
                        //Post Receipts
                        GenJnlLine.RESET;
                        GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                        GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                        GenJnlLine.DELETEALL;
                        GenBatch.INIT;
                        GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenBatch.Name:=RcptHeader."No.";
                        IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                        LineNo:=LineNo + 10000;
                        //insert Entries to GL
                        GenJnlLine.INIT;
                        GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                        GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                        GenJnlLine."Posting Date":=TODAY;
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                        // EVALUATE(Contr, ClientsArray[4]);
                        RcptHeader.CalcFields("Receipt Amount");
                        GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                        IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                        RcptLine2.SetRange(No, RcptHeader."No.");
                        if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                                GenJnlLine."Line No.":=LineNo;
                                GenJnlLine."Account Type":=RcptLine2."Account Type";
                                GenJnlLine."Account No.":=RcptLine2."Account No";
                                GenJnlLine.Validate(GenJnlLine."Account No.");
                                GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                                GenJnlLine."Document No.":=RcptHeader."No.";
                                GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                                GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                                GenJnlLine.Description:=RcptLine2.Description;
                                GenJnlLine.Amount:=-RcptLine2.Amount;
                                GenJnlLine."Currency Code":=RcptHeader.Currency;
                                GenJnlLine.Validate("Currency Code");
                                GenJnlLine.Validate(GenJnlLine.Amount);
                                GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                                GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                                GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                                GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                                //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                                GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                                GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                                GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                                if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                                if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                                if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                                //Lydia
                                //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                                if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                            until RcptLine2.Next() = 0;
                        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                        LicenseRen."Paid license fee":=true;
                        LicenseRen."License fee Receipt No.":=RcptHeader."No.";
                        LicenseRen.Status:=LicenseRen.Status::Approved;
                        LicenseRen.Modify();
                        //Update Receipt
                        RcptHeader2.RESET;
                        RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                        IF RcptHeader2.FIND('-')THEN BEGIN
                            RcptHeader2.Cashier:=USERID;
                            RcptHeader2.Posted:=TRUE;
                            RcptHeader2."Posting Date":=TODAY;
                            RcptHeader2."Time Posted":=TIME;
                            RcptHeader2."Posted By":=USERID;
                            //Update Lines
                            RcptLine2.RESET;
                            RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                            RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                            IF RcptLine2.FIND('-')THEN BEGIN
                                REPEAT RcptLine2.Posted:=TRUE;
                                    RcptLine2.MODIFY;
                                UNTIL RcptLine2.NEXT = 0;
                            END;
                            RcptHeader2.MODIFY;
                        END;
                        MpesaEntries.Posted:=true;
                        MpesaEntries.Modify();
                    end;
                end;
                //Monthly return
                MonthlyReturn.Reset();
                MonthlyReturn.SetRange("Invoice No.", MpesaEntries.BillRefNumber);
                if MonthlyReturn.FindFirst()then begin
                    Licenses.SetRange("Application no", MonthlyReturn."Applicant No.");
                    if Licenses.FindFirst()then begin
                        CustLedgerEntry.Reset();
                        CustLedgerEntry.SetRange("Document No.", MonthlyReturn."Invoice No.");
                        if CustLedgerEntry.FindFirst()then begin
                            CustLedgerEntry.CalcFields("Remaining Amount");
                            //insert header
                            RcptHeader.INIT;
                            RcptHeader."No.":='';
                            RcptHeader.Date:=TODAY;
                            RcptHeader.Cashier:=USERID;
                            RcptHeader."Created By":=USERID;
                            RcptHeader."Date Created":=Today;
                            RcptHeader."Payment Release Date":=Today;
                            RcptHeader."Payment Type":=RcptHeader."Payment Type"::Receipt;
                            RcptHeader."Receipt Amount":=MpesaEntries.TransAmount;
                            RcptHeader."Shortcut Dimension 1 Code":=MPESASetup."Default Dim1";
                            RcptHeader."Shortcut Dimension 2 Code":=MPESASetup."Default Dim2";
                            RcptHeader."Responsibility Center":=MPESASetup."Default Responsibility Center";
                            RcptHeader."Paying Bank Account":=MPESASetup."Default Bank Account";
                            RcptHeader.VALIDATE("Paying Bank Account");
                            RcptHeader."Received From":=Licenses."Customer No." + ' for ' + 'Monthly return';
                            RcptHeader."Payment Narration":='MPESASetup."Default Description';
                            RcptHeader.INSERT(true);
                            Message(RcptHeader."No.");
                            RcptLine2.reset;
                            RcptLine2.SetRange(No, RcptHeader."No.");
                            if RcptLine2.Find('-')then RcptLine2.DeleteAll();
                            //insert lines
                            RcptLine.INIT;
                            RcptLine."Payment Type":=RcptLine."Payment Type"::Receipt;
                            RcptLine."Line No":=1000;
                            RcptLine.No:=RcptHeader."No.";
                            RcptLine."Expenditure Type":=MPESASetup."Default Type";
                            RcptLine.validate("Expenditure Type");
                            RcptLine."Account No":=Licenses."Customer No.";
                            RcptLine.VALIDATE("Account No");
                            RcptLine.Amount:=MpesaEntries.TransAmount;
                            RcptLine.validate(Amount);
                            RcptLine."Applies-to ID":=RcptHeader."No.";
                            RcptLine.INSERT;
                            CustLedgerEntry."Applies-to ID":=RcptHeader."No.";
                            CustLedgerEntry.Modify();
                        end;
                        //Post Receipts
                        GenJnlLine.RESET;
                        GenJnlLine.SETRANGE("Journal Template Name", MPESASetup."Integration Journal Template");
                        GenJnlLine.SETRANGE("Journal Batch Name", RcptHeader."No.");
                        GenJnlLine.DELETEALL;
                        GenBatch.INIT;
                        GenBatch."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenBatch.Name:=RcptHeader."No.";
                        IF NOT GenBatch.GET(GenBatch."Journal Template Name", GenBatch.Name)THEN GenBatch.INSERT;
                        LineNo:=LineNo + 10000;
                        //insert Entries to GL
                        GenJnlLine.INIT;
                        GenJnlLine."Journal Template Name":=MPESASetup."Integration Journal Template";
                        GenJnlLine."Journal Batch Name":=RcptHeader."No.";
                        GenJnlLine."Line No.":=LineNo;
                        GenJnlLine."Account Type":=GenJnlLine."Account Type"::"Bank Account";
                        GenJnlLine."Account No.":=RcptHeader."Paying Bank Account";
                        GenJnlLine."Posting Date":=TODAY;
                        GenJnlLine."Document No.":=RcptHeader."No.";
                        GenJnlLine.Description:=COPYSTR(RcptHeader."Received From", 1, 50);
                        // EVALUATE(Contr, ClientsArray[4]);
                        RcptHeader.CalcFields("Receipt Amount");
                        GenJnlLine.Amount:=RcptHeader."Receipt Amount";
                        IF(GenJnlLine.Amount <> 0)THEN GenJnlLine.INSERT;
                        RcptLine2.SetRange(No, RcptHeader."No.");
                        if RcptLine2.Find('-')then repeat LineNo:=LineNo + 10000;
                                GenJnlLine."Line No.":=LineNo;
                                GenJnlLine."Account Type":=RcptLine2."Account Type";
                                GenJnlLine."Account No.":=RcptLine2."Account No";
                                GenJnlLine.Validate(GenJnlLine."Account No.");
                                GenJnlLine."Posting Date":=RcptHeader."Payment Release Date";
                                GenJnlLine."Document No.":=RcptHeader."No.";
                                GenJnlLine."External Document No.":=RcptHeader."Cheque No";
                                GenJnlLine."Payment Method Code":=RcptHeader."Pay Mode";
                                GenJnlLine.Description:=RcptLine2.Description;
                                GenJnlLine.Amount:=-RcptLine2.Amount;
                                GenJnlLine."Currency Code":=RcptHeader.Currency;
                                GenJnlLine.Validate("Currency Code");
                                GenJnlLine.Validate(GenJnlLine.Amount);
                                GenJnlLine."Shortcut Dimension 1 Code":=RcptHeader."Shortcut Dimension 1 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 1 Code");
                                GenJnlLine."Shortcut Dimension 2 Code":=RcptHeader."Shortcut Dimension 2 Code";
                                GenJnlLine.Validate(GenJnlLine."Shortcut Dimension 2 Code");
                                GenJnlLine."Dimension Set ID":=RcptLine2."Dimension Set ID";
                                GenJnlLine."Gen. Posting Type":=RcptLine2."Gen. Posting Type";
                                //GenJnlLine."Applies-to Doc. Type":=GenJnlLine."Applies-to Doc. Type"::Invoice;
                                GenJnlLine."Applies-to Doc. No.":=RcptLine2."Applies-to Doc. No.";
                                GenJnlLine.Validate(GenJnlLine."Applies-to Doc. No.");
                                GenJnlLine."Applies-to ID":=RcptLine2."Applies-to ID";
                                if RcptHeader."Payment Type" = RcptHeader."Payment Type"::"Receipt-Property" then GenJnlLine."Loan No":=RcptHeader."TPS Loan No.";
                                if RcptHeader."Deposit Receipt" then GenJnlLine.Deposit:=true;
                                if RcptHeader."Service Charge Pmt" then GenJnlLine."TPS Transaction Type":=GenJnlLine."TPS Transaction Type"::"Service Charge Paid";
                                //Lydia
                                //GenJnlLine."Gen. Posting Type":=GenJnlLine."Gen. Posting Type"::Sale;
                                if GenJnlLine.Amount <> 0 THEN GenJnlLine.INSERT;
                            until RcptLine2.Next() = 0;
                        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post", GenJnlLine);
                        MonthlyReturn.Paid:=true;
                        MonthlyReturn."Receipt No.":=RcptHeader."No.";
                        MonthlyReturn.Modify();
                        //Update Receipt
                        RcptHeader2.RESET;
                        RcptHeader2.SETRANGE("No.", RcptHeader."No.");
                        IF RcptHeader2.FIND('-')THEN BEGIN
                            RcptHeader2.Cashier:=USERID;
                            RcptHeader2.Posted:=TRUE;
                            RcptHeader2."Posting Date":=TODAY;
                            RcptHeader2."Time Posted":=TIME;
                            RcptHeader2."Posted By":=USERID;
                            //Update Lines
                            RcptLine2.RESET;
                            RcptLine2.SETRANGE(RcptLine2.No, RcptHeader."No.");
                            RcptLine2.SETRANGE(RcptLine2.Posted, FALSE);
                            IF RcptLine2.FIND('-')THEN BEGIN
                                REPEAT RcptLine2.Posted:=TRUE;
                                    RcptLine2.MODIFY;
                                UNTIL RcptLine2.NEXT = 0;
                            END;
                            RcptHeader2.MODIFY;
                        END;
                        MpesaEntries.Posted:=true;
                        MpesaEntries.Modify();
                    end;
                end;
            until MpesaEntries.Next() = 0;
    end;
}
